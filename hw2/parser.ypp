%{
/* Declarations section */
#include <iostream>
#include <stdlib.h>
#include "output.hpp"
using namespace std;
using namespace output;

extern int yylex(); 
extern int yylineno;
int yyerror(const char * message);
%}

/* Token declarations section */
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%right IF;
%right WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%left SC;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left EQUALITY_OP;
%left RELATIONAL_OP;
%left ADDITIVE_BINOP;
%left MULTIPLICATIVE_BINOP;
%right NOT;
%left RPAREN;
%right LPAREN;
%left RBRACE;
%right LBRACE;
%nonassoc ELSE;

%%

/* Rules section */
Program:        Statements                                           {printProductionRule(1);};
Statements:     Statement                                            {printProductionRule(2);}
          |     Statements Statement                                 {printProductionRule(3);};
Statement:      LBRACE Statements RBRACE                             {printProductionRule(4);}
          |     Type ID SC                                           {printProductionRule(5);}
          |     Type ID ASSIGN Exp SC                                {printProductionRule(6);}
          |     ID ASSIGN Exp SC                                     {printProductionRule(7);}
          |     Call SC                                              {printProductionRule(8);}
          |     RETURN SC                                            {printProductionRule(9);}
          |     IF LPAREN Exp RPAREN Statement                       {printProductionRule(10);}
          |     IF LPAREN Exp RPAREN Statement ELSE Statement        {printProductionRule(11);}
          |     WHILE LPAREN Exp RPAREN Statement                    {printProductionRule(12);}
          |     BREAK SC                                             {printProductionRule(13);}
          |     CONTINUE SC                                          {printProductionRule(14);};
Call:           ID LPAREN Exp RPAREN                                 {printProductionRule(15);};
Type:           INT                                                  {printProductionRule(16);}
          |     BYTE                                                 {printProductionRule(17);}
          |     BOOL                                                 {printProductionRule(18);};
Exp:            LPAREN Exp RPAREN                                    {printProductionRule(19);}
          |     Exp ADDITIVE_BINOP Exp                               {printProductionRule(20);}
          |     Exp MULTIPLICATIVE_BINOP Exp                         {printProductionRule(20);}
          |     ID                                                   {printProductionRule(21);}
          |     Call                                                 {printProductionRule(22);}
          |     NUM                                                  {printProductionRule(23);}
          |     NUM B                                                {printProductionRule(24);}
          |     STRING                                               {printProductionRule(25);}
          |     TRUE                                                 {printProductionRule(26);}
          |     FALSE                                                {printProductionRule(27);}
          |     NOT Exp                                              {printProductionRule(28);}
          |     Exp AND Exp                                          {printProductionRule(29);}
          |     Exp OR Exp                                           {printProductionRule(30);}
          |     Exp EQUALITY_OP Exp                                  {printProductionRule(31);}
          |     Exp RELATIONAL_OP Exp                                {printProductionRule(31);}
          |     LPAREN Type RPAREN Exp                               {printProductionRule(32);};
%%

/* Routines section */
int main(){
    return yyparse();
}

int yyerror(const char* message){
    errorSyn(yylineno);
    exit(1);
}
        
